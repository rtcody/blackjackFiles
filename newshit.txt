bool Player::canBet()
{
    return betAmount <= bankAmount; 
}

void Player::setBet(int betAmount)
{
    this->betAmount = betAmount;   
}

void Player::setBank(int bankAmount)
{
    this->bankAmount = bankAmount; 
}

int Player::getBank()
{
    return bankAmount; 
}

int Player::getBet()
{
    return betAmount;      
}

void Player::betPayout()
{
    bankAmount += betAmount;   
}

void Player::betLoser()
{
    bankAmount -= betAmount; 
}

void Player::betBlackJack()
{
    betAmount = betAmount * 2;   
    betPayout();   
}

Player* Player::split() 
{
    //
    //
    //TRUTH LOGIC NOT PLACED YET FOR EASIER TESTING
    //
    //

    Deck myD; 
    Player player1(myD), player2(myD); 

    //set the first card for each new hand equal to the similar card of the original hand
    player1.getCard(0).setValue(blackjackHand[0].getValue()); 
    player1.getCard(0).setSuit(blackjackHand[0].getSuit()); 
    player1.getCard(0).setImage(blackjackHand[0].getImage()); 

    player2.getCard(0).setValue(blackjackHand[0].getValue()); 
    player2.getCard(0).setSuit(blackjackHand[0].getSuit()); 
    player2.getCard(0).setImage(blackjackHand[0].getImage()); 

    //make player array with both hands, why was this so hard lol 
    Player twoHands[2] = {player1, player2}; 

    return twoHands;           
}

//NEW HEADER SHIT
	bool canSplit();

	Player* split();               

	bool canBet(); 

	void setBet(int betAmount); 

	void setBank(int bankAmount); 

	int getBank();

	int getBet();
	
	void betPayout(void); 
	void betLoser(void); 
	void betBlackJack(void); 
private:
	int bankAmount; 
	int betAmount; 
